) +
theme_minimal()
print(heatmap_africa)
tanzania_c$Country <- "Tanzania"
tunisia_c$Country <- "Tunisia"
senegal_c$Country <- "Sengeal"
zambia_c$Country <- "Zambia"
uganda_c$Country <- "Uganda"
africa <- rbind(tanzania_c,tunisia_c, senegal_c, zambia_c, uganda_c)
data_for_clustering <-africa[, c("Year", "Deaths", "Monetary.LossUSD", "Affected")]
scaled_data <- scale(data_for_clustering)
set.seed(123)
clara_output <- clara(scaled_data, k = 5, samples = 500)
colors <- rainbow(length(unique(clara_output$clustering)))
scaled_data_with_clusters <- cbind(scaled_data, Cluster = clara_output$clustering)
pairs(scaled_data_with_clusters[, -ncol(scaled_data_with_clusters)],
col = colors[clara_output$clustering], pch = 19)
legend("left", legend = unique(clara_output$clustering), fill = colors, title = "Clusters")
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/Post graduation/Semester 1/Data Analysis/Coursework/Group 18/America")
library(dplyr)
library(tidyr)
library(ggplot2)
library(car)
library(glmnet)
library(caret)
library(cluster)
#Guatemala
guatemala <- read.csv("guatemala.csv",header=TRUE,na.strings=c(""))
colnames(guatemala) <- gsub("^\\s+|\\s+$", "", colnames(guatemala))#
#Dominican Republic
drepublic <- read.csv("drepublic.csv",header=TRUE,na.strings=c(""))
colnames(drepublic) <- gsub("^\\s+|\\s+$", "", colnames(drepublic))
#Mexico
mexico <- read.csv("mexico.csv",header=TRUE,na.strings=c(""))
colnames(mexico) <- gsub("^\\s+|\\s+$", "", colnames(mexico))
print("Total Missing Values: ")
print(paste("Guatemala: ",sum(is.na(guatemala))))
print(paste("Drepublic: ",sum(is.na(drepublic))))
print(paste("Mexico: ",sum(is.na(mexico))))
#Guatemala missing values
guatemala <- na.omit(guatemala, cols = c('Event'))
#Dominican Republic missing values
drepublic <- na.omit(drepublic, cols = c('Event'))
#Mexico missing values
mexico <- na.omit(mexico, cols = c('Event'))
print("Total Missing Values: ")
print(paste("Guatemala: ",sum(is.na(guatemala))))
print(paste("Drepublic: ",sum(is.na(drepublic))))
print(paste("Mexico: ",sum(is.na(mexico))))
print("Total Duplicate values")
print(paste("Guatemala: ", sum(duplicated(guatemala))))
print(paste("DRepublic: ", sum(duplicated(drepublic))))
print(paste("Mexico: ", sum(duplicated(mexico))))
guatemala$Houses.Ruined <- guatemala$Houses.Destroyed + guatemala$Houses.Damaged
guatemala$Affected <-guatemala$Directly.affected + guatemala$Indirectly.Affected
guatemala$Monetary.LossUSD<- guatemala$Losses..USD + guatemala$Losses..Local * (0.13)
guatemala$Monetary.LossUSD <- as.integer(guatemala$Monetary.LossUSD)
guatemala= select(guatemala, -5:-10)
head(guatemala)
summary(guatemala)
drepublic$Houses.Ruined <- drepublic$Houses.Destroyed +drepublic$Houses.Damaged
drepublic$Affected <-drepublic$Directly.affected + drepublic$Indirectly.Affected
drepublic$Monetary.LossUSD<- drepublic$Losses..USD + drepublic$Losses..Local * (0.017)
drepublic$Monetary.LossUSD <- as.integer(drepublic$Monetary.LossUSD)
drepublic= select(drepublic, -5:-10)
head(drepublic)
summary(drepublic)
mexico$Houses.Ruined <-mexico$Houses.Destroyed + mexico$Houses.Damaged
mexico$Affected <-mexico$Directly.affected + mexico$Indirectly.Affected
mexico$Monetary.LossUSD<-mexico$Losses..USD + mexico$Losses..Local * (0.060)
mexico$Monetary.LossUSD <- as.integer(mexico$Monetary.LossUSD)
# AS There were 19 values highter than e9
mexico$Monetary.LossUSD[is.na(mexico$Monetary.LossUSD)] <- max(mexico$Monetary.LossUSD, na.rm = TRUE)
mexico= select(mexico, -5:-10)
summary(mexico)
add_Event_Severity <- function(data) {
data$Event_Severity <- data$Deaths / data$DataCards
a_countries <- c("mexico")
b_countries <- c("guatemala", "drepublic")
for (country in a_countries) {
data$Event_Severity[data$Country == country & data$Event_Severity > 1] <- 1
data$Event_Severity[data$Country == country & data$Event_Severity < 0.5] <- 0.5
}
for (country in b_countries) {
data$Event_Severity[data$Country == country & data$Event_Severity > 2] <- 2
data$Event_Severity[data$Country == country & data$Event_Severity < 1] <- 1
}
data$Event_Severity <- round(data$Event_Severity * 100)
return(data$Event_Severity)
}
guatemala$Event_Severity <- add_Event_Severity(guatemala)
drepublic$Event_Severity <- add_Event_Severity(drepublic)
mexico$Event_Severity <- add_Event_Severity(mexico)
guatemala$Event_factor<-as.integer(as.factor(guatemala$Event))
drepublic$Event_factor<-as.integer(as.factor(drepublic$Event))
mexico$Event_factor<-as.integer(as.factor(mexico$Event))
write.csv(guatemala, file = "guatemala_cleaned.csv", row.names = FALSE)
write.csv(drepublic, file = "drepublic_cleaned.csv", row.names = FALSE)
write.csv(mexico, file = "mexico_cleaned.csv", row.names = FALSE)
guatemala_c <- read.csv("guatemala_cleaned.csv",header=TRUE)
drepublic_c <- read.csv("drepublic_cleaned.csv",header=TRUE)
mexico_c <- read.csv("mexico_cleaned.csv",header=TRUE)
guatemala_c<- guatemala_c %>%
mutate(Total = DataCards + Deaths + Houses.Ruined + Affected)
guatemala_c_perc <- guatemala_c %>%
mutate(
DataCards_perc = DataCards / Total,
Deaths_perc = Deaths / Total,
Houses_Ruined_perc = Houses.Ruined / Total,
Affected_perc = Affected / Total
) %>%
select(Event, DataCards_perc, Deaths_perc, Houses_Ruined_perc, Affected_perc)
guatemala_c_long <-  guatemala_c_perc %>%
pivot_longer(cols = -Event, names_to = "Factor", values_to = "Percentage")
ggplot( guatemala_c_long, aes(x = "", y = Percentage, fill = Event)) +
geom_bar(stat = "identity", width = 1) +
facet_wrap(~Factor) +  # Separate pie for each factor
coord_polar(theta = "y") +
theme_minimal() +
ggtitle("Event Distribution by Factor (Percentage)")
drepublic_c<- drepublic_c %>%
mutate(Total = DataCards + Deaths + Houses.Ruined + Affected)
drepublic_c_perc <- drepublic_c %>%
mutate(
DataCards_perc = DataCards / Total,
Deaths_perc = Deaths / Total,
Houses_Ruined_perc = Houses.Ruined / Total,
Affected_perc = Affected / Total
) %>%
select(Event, DataCards_perc, Deaths_perc, Houses_Ruined_perc, Affected_perc)
drepublic_c_long <-  drepublic_c_perc %>%
pivot_longer(cols = -Event, names_to = "Factor", values_to = "Percentage")
ggplot( drepublic_c_long, aes(x = "", y = Percentage, fill = Event)) +
geom_bar(stat = "identity", width = 1) +
facet_wrap(~Factor) +  # Separate pie for each factor
coord_polar(theta = "y") +
theme_minimal() +
ggtitle("Event Distribution by Factor (Percentage)")
mexico_c<- mexico_c %>%
mutate(Total = DataCards + Deaths + Houses.Ruined + Affected)
mexico_c_perc <- mexico_c %>%
mutate(
DataCards_perc = DataCards / Total,
Deaths_perc = Deaths / Total,
Houses_Ruined_perc = Houses.Ruined / Total,
Affected_perc = Affected / Total
) %>%
select(Event, DataCards_perc, Deaths_perc, Houses_Ruined_perc, Affected_perc)
mexico_c_long <-  mexico_c_perc %>%
pivot_longer(cols = -Event, names_to = "Factor", values_to = "Percentage")
ggplot( mexico_c_long, aes(x = "", y = Percentage, fill = Event)) +
geom_bar(stat = "identity", width = 1) +
facet_wrap(~Factor) +  # Separate pie for each factor
coord_polar(theta = "y") +
theme_minimal() +
ggtitle("Event Distribution by Factor (Percentage)")
set.seed(123)
split_indices <- createDataPartition(guatemala_c$Year, p = 0.7, list = FALSE)
training_data_guatemala <- guatemala_c[split_indices, ]
testing_data_guatemala <- guatemala_c[-split_indices, ]
set.seed(123)
split_indices <- createDataPartition(drepublic_c$Year, p = 0.7, list = FALSE)
training_data_drepublic <- drepublic_c[split_indices, ]
testing_data_drepublic <- drepublic_c[-split_indices, ]
set.seed(123)
split_indices <- createDataPartition(mexico_c$Year, p = 0.7, list = FALSE)
training_data_mexico <- mexico_c[split_indices, ]
testing_data_mexico <- mexico_c[-split_indices, ]
guatemala_no_event <- guatemala_c[, !names(guatemala_c) %in% c("Event", "Monetary.LossUSD")]
scaled_data <- scale(guatemala_no_event)
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
summary(pca_result)
formula <- guatemala_c$Deaths ~ guatemala_c$DataCards + guatemala_c$Deaths + guatemala_c$Event_Severity + guatemala_c$Houses.Ruined + guatemala_c$Affected
model <- lm(formula, data = guatemala_c)
vif_result <- car::vif(model)
cat("\n","VIF results for Deaths", ":\n")
print(vif_result)
cat("\n")
cor_matrix <- cor(guatemala_c[c("DataCards", "Deaths", "Monetary.LossUSD", "Event_Severity", "Houses.Ruined", "Affected")])
print("Correlation matrix ")
print(cor_matrix)
drepublic_no_event <- drepublic_c[, !names(drepublic_c) %in% c("Event")]
scaled_data <- scale(drepublic_no_event)
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
summary(pca_result)
formula <- drepublic_c$Deaths ~ drepublic_c$DataCards +drepublic_c$Monetary.LossUSD +drepublic_c$Deaths + drepublic_c$Event_Severity + drepublic_c$Houses.Ruined + drepublic_c$Affected
model <- lm(formula, data = drepublic_c)
vif_result <- car::vif(model)
cat("\n","VIF results for Deaths", ":\n")
print(vif_result)
cat("\n")
cor_matrix <- cor(drepublic_c[c("DataCards", "Deaths", "Monetary.LossUSD", "Event_Severity", "Houses.Ruined", "Affected")])
print("Correlation matrix ")
print(cor_matrix)
mexico_no_event <- mexico_c[, !names(mexico_c) %in% c("Event")]
scaled_data <- scale(mexico_no_event)
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
summary(pca_result)
formula <- mexico_c$Deaths ~ mexico_c$DataCards + mexico_c$Deaths +mexico_c$Monetary.LossUSD+ mexico_c$Event_Severity + mexico_c$Houses.Ruined + mexico_c$Affected
model <- lm(formula, data = mexico_c)
vif_result <- car::vif(model)
cat("\n","VIF results for Deaths", ":\n")
print(vif_result)
cat("\n")
cor_matrix <- cor(mexico_c[c("DataCards", "Deaths", "Monetary.LossUSD", "Event_Severity", "Houses.Ruined", "Affected")])
print("Correlation matrix ")
print(cor_matrix)
model <- lm(Deaths ~ Event_Severity + DataCards, data = training_data_guatemala)
predictions <- predict(model, newdata = testing_data_guatemala)
# Evaluate the model using testing data
y_test <- testing_data_guatemala$Deaths
# Calculate R-squared
rsquared <- cor(predictions, y_test)^2
# Calculate Mean Squared Error (MSE)
mse <- mean((predictions - y_test)^2)
# Print R-squared and MSE
cat("R-squared:", rsquared, "\n")
## R-squared:
cat("Mean Squared Error:", mse, "\n")
plot(predictions, y_test,
xlab = "Predicted Values", ylab = "Actual Values",
main = "Predicted vs. Actual Values")
# Add a line with a 1:1 relationship for reference
abline(0, 1, col = "red")
y <- training_data_drepublic$Deaths
X <- subset(training_data_drepublic, select =-  c(Event, Deaths))  # Selecting features not to include
train_data <- training_data_drepublic
test_data <-  testing_data_drepublic
X_train <- as.matrix(subset(train_data, select = -  c(Event, Deaths)))
y_train <- train_data$Deaths
X_test <- as.matrix(subset(test_data, select =-  c(Event, Deaths)))
y_test <- test_data$Deaths
X_train_std <- scale(X_train)
X_test_std <- scale(X_test)
enet_model_drepublic<- cv.glmnet(X_train_std, y_train, alpha = 0.5)  # alpha = 0.5 indicates the elastic net
y_pred <- predict(enet_model_drepublic, newx = X_test_std)
mse <- mean((y_pred - y_test)^2)
print(paste("Mean Squared Error:", mse))
rsquared <- cor(y_pred, y_test)^2
print(paste("R-squared:", rsquared))
plot(enet_model_drepublic)
plot(y_test, y_pred, main = "Actual vs Predicted", xlab = "Actual", ylab = "Predicted")
abline(0, 1, col = "red")  # Adding a line for perfect prediction
y <- training_data_mexico$Deaths
X <- subset(training_data_mexico, select =-  c(Event, Deaths) )  # Selecting features not to include
train_data <- training_data_mexico
test_data <-  testing_data_mexico
X_train <- as.matrix(subset(train_data, select =  -  c(Event, Deaths)))
y_train <- train_data$Deaths
X_test <- as.matrix(subset(test_data, select =  -  c(Event, Deaths)))
y_test <- test_data$Deaths
X_train_std <- scale(X_train)
X_test_std <- scale(X_test)
enet_model_mexico <- cv.glmnet(X_train_std, y_train, alpha = 0.5)  # alpha = 0.5 indicates the elastic net
best_lambda <- enet_model_mexico$lambda.min
y_pred <- predict(enet_model_mexico, newx = X_test_std, s = best_lambda)
mse <- mean((y_pred - y_test)^2)
rsquared <- cor(y_pred, y_test)^2
cat("Best Lambda:", best_lambda, "\n")
cat("Mean Squared Error:", mse, "\n")
cat("R-squared:", rsquared, "\n")
plot(enet_model_mexico)
plot(y_test, y_pred, main = "Actual vs Predicted", xlab = "Actual", ylab = "Predicted")
abline(0, 1, col = "red")  # Adding a line for perfect prediction
guatemala_c$Severity_Class <- ifelse(guatemala_c$Event_Severity >= mean(guatemala_c$Event_Severity), "High Severity", "Low Severity")
year_quantiles <- quantile(guatemala_c$Year, probs = c(0, 1/3, 2/3, 1))
guatemala_c$Temporal_Class <- cut(guatemala_c$Year,
breaks = year_quantiles,
labels = c("Early Period", "Mid Period", "Recent Period"),
include.lowest = TRUE)
guatemala_c$Combined_Impact <- rowSums(subset(guatemala_c, select =  c(Deaths, Houses.Ruined, Affected, Monetary.LossUSD)))
quantiles <- quantile(guatemala_c$Combined_Impact, probs = c(0, 0.25, 0.75, 1))
guatemala_c$Impact_Class <- cut(guatemala_c$Combined_Impact,
breaks = quantiles,
labels = c("Minimal Impact", "Moderate Impact", "Severe Impact"),
include.lowest = TRUE)
kmeans_result <- kmeans(guatemala_c$DataCards, centers = 4)
guatemala_c$cluster_id <- factor(kmeans_result$cluster)
cluster_means <- aggregate(guatemala_c$DataCards, by = list(guatemala_c$cluster_id), FUN = mean)
sorted_clusters <- cluster_means[order(cluster_means$x),]
label_mapping <- c("Most DataCards", "Moderately High DataCards", "Moderately Less DataCards", "Least DataCards")
guatemala_c$cluster_label <- label_mapping[match(guatemala_c$cluster_id, sorted_clusters$Group.1)]
drepublic_c$Severity_Class <- ifelse(drepublic_c$Event_Severity >= mean(drepublic_c$Event_Severity), "High Severity", "Low Severity")
year_quantiles <- quantile(drepublic_c$Year, probs = c(0, 1/3, 2/3, 1))
drepublic_c$Temporal_Class <- cut(drepublic_c$Year,
breaks = year_quantiles,
labels = c("Early Period", "Mid Period", "Recent Period"),
include.lowest = TRUE)
drepublic_c$Combined_Impact <- rowSums(subset(drepublic_c, select =  c(Deaths, Houses.Ruined, Affected, Monetary.LossUSD)))
quantiles <- quantile(drepublic_c$Combined_Impact, probs = c(0, 0.25, 0.75, 1))
quantiles <- unique(quantiles)
labels <- c("Minimal Impact", "Moderate Impact", "Severe Impact", "Very Severe Impact")
drepublic_c$Impact_Class <- cut(drepublic_c$Combined_Impact,
breaks = quantiles,
labels = labels[1:(length(quantiles) - 1)],
include.lowest = TRUE)
kmeans_result <- kmeans(drepublic_c$DataCards, centers = 4)
drepublic_c$cluster_id <- factor(kmeans_result$cluster)
cluster_means <- aggregate(drepublic_c$DataCards, by = list(drepublic_c$cluster_id), FUN = mean)
sorted_clusters <- cluster_means[order(cluster_means$x),]
label_mapping <- c("Most DataCards", "Moderately High DataCards", "Moderately Less DataCards", "Least DataCards")
drepublic_c$cluster_label <- label_mapping[match(drepublic_c$cluster_id, sorted_clusters$Group.1)]
mexico_c$Severity_Class <- ifelse(mexico_c$Event_Severity >= mean(mexico_c$Event_Severity), "High Severity", "Low Severity")
year_quantiles <- quantile(mexico_c$Year, probs = c(0, 1/3, 2/3, 1))
mexico_c$Temporal_Class <- cut(mexico_c$Year,
breaks = year_quantiles,
labels = c("Early Period", "Mid Period", "Recent Period"),
include.lowest = TRUE)
mexico_c$Combined_Impact <- rowSums(subset(mexico_c, select =  c(Deaths, Houses.Ruined, Affected, Monetary.LossUSD)))
quantiles <- quantile(mexico_c$Combined_Impact, probs = c(0, 0.25, 0.75, 1))
mexico_c$Impact_Class <- cut(mexico_c$Combined_Impact,
breaks = quantiles,
labels = c("Minimal Impact", "Moderate Impact", "Severe Impact"),
include.lowest = TRUE)
kmeans_result <- kmeans(mexico_c$DataCards, centers = 4)
mexico_c$cluster_id <- factor(kmeans_result$cluster)
cluster_means <- aggregate(mexico_c$DataCards, by = list(mexico_c$cluster_id), FUN = mean)
sorted_clusters <- cluster_means[order(cluster_means$x),]
label_mapping <- c("Most DataCards", "Moderately High DataCards", "Moderately Less DataCards", "Least DataCards")
mexico_c$cluster_label <- label_mapping[match(mexico_c$cluster_id, sorted_clusters$Group.1)]
combined_data_america <- rbind(
data.frame(Country = "Guatemala", Severity_Class = guatemala_c$Severity_Class, Temporal_Class =guatemala_c$Temporal_Class, Impact_Class = guatemala_c$Impact_Class,  cluster_id =  guatemala_c$cluster_label, Year = guatemala_c$Year ),
data.frame(Country = "Dominican Republic", Severity_Class = drepublic_c$Severity_Class, Temporal_Class =drepublic_c$Temporal_Class, Impact_Class = drepublic_c$Impact_Class, cluster_id =  drepublic_c$cluster_label, Year = drepublic_c$Year),
data.frame(Country = "Mexico", Severity_Class = mexico_c$Severity_Class, Temporal_Class =mexico_c$Temporal_Class, Impact_Class = mexico_c$Impact_Class, cluster_id =  mexico_c$cluster_label, Year = mexico_c$Year)
)
classify_disaster <- function(severity, impact, cluster) {
risk_level <- character(length = length(severity))
for (i in 1:length(severity)) {
if (severity[i] == "High Severity") {
if (impact[i] == "Very Severe Impact") {
risk_level[i] <- "Extremely High Risk"
} else if (impact[i] == "Severe Impact") {
risk_level[i] <- "Very High Risk"
} else if (impact[i] == "Moderate Impact") {
risk_level[i] <- "High-Moderate Risk"
} else {
risk_level[i] <- "High-Low Risk"
}
} else if (severity[i] == "Low Severity") {
if (impact[i] == "Severe Impact") {
risk_level[i] <- "Moderate-High Risk"
} else if (impact[i] == "Moderate Impact") {
risk_level[i] <- "Moderate Risk"
} else {
risk_level[i] <- "Low Risk"
}
} else if (impact[i] == "Severe Impact") {
risk_level[i] <- "High Risk"
} else if (cluster[i] == "Most DataCards") {
risk_level[i] <- "Clustered Risk"
} else if (cluster[i] == "Moderately High DataCards") {
risk_level[i] <- "Moderately High DataCards Risk"
} else if (cluster[i] == "Moderately Less DataCards") {
risk_level[i] <- "Moderately Less DataCards Risk"
} else if (cluster[i] == "Least DataCards") {
risk_level[i] <- "Least DataCards Risk"
} else {
risk_level[i] <- "Undefined Risk"
}
}
return(risk_level)
}
combined_data_america$Disaster_Risk <- classify_disaster(
combined_data_america$Severity_Class,
combined_data_america$Impact_Class,
combined_data_america$cluster_id
)
combined_data_america$Year <- as.factor(combined_data_america$Temporal_Class)
heatmap_america <- ggplot(combined_data_america, aes(x = Year, y = Country, fill = Disaster_Risk)) +
geom_tile() +
scale_fill_manual(values = c(
"Extremely High Risk" = "red",
"Very High Risk" = "orange",
"High-Moderate Risk" = "yellow",
"High-Low Risk" = "yellowgreen",
"Moderate-High Risk" = "green",
"Moderate Risk" = "lightblue",
"Low Risk" = "blue",
"High Risk" = "purple",
"Clustered Risk" = "skyblue",
"Moderately High DataCards Risk" = "pink",
"Moderately Less DataCards Risk" = "violet",
"Least DataCards Risk" = "grey",
"Undefined Risk" = "white"
)) +
labs(
title = "Disaster Risk Heatmap",
x = "Year",
y = "Country",
fill = "Disaster Risk"
) +
theme_minimal()
print(heatmap_america)
guatemala_c$Country <- "Guatemala"
drepublic_c$Country <- "DRepublic"
mexico_c$Country <- "Mexico"
america <- rbind(guatemala_c,drepublic_c,mexico_c)
scaled_data <- scale(data_for_clustering)
set.seed(123)
clara_output <- clara(scaled_data, k = 5, samples = 500)
colors <- rainbow(length(unique(clara_output$clustering)))
scaled_data_with_clusters <- cbind(scaled_data, Cluster = clara_output$clustering)
pairs(scaled_data_with_clusters[, -ncol(scaled_data_with_clusters)],
col = colors[clara_output$clustering], pch = 19)
legend("left", legend = unique(clara_output$clustering), fill = colors, title = "Clusters")
knitr::opts_chunk$set(echo = TRUE)
setwd("D:/Post graduation/Semester 1/Data Analysis/Coursework/Group 18")
# combine the continents
combined_data <- rbind(
transform(asia,Continent = "Asia"),
transform(africa, Continent = "Africa"),
transform(america, Continent = "Americas")
)
# Get only numeric Values
numeric_data <- combined_data[, sapply(combined_data, is.numeric)]
# find PCA
scaled_data <- scale(numeric_data)
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
summary(pca_result)
formula <- numeric_data$Deaths ~ numeric_data$DataCards + numeric_data$Deaths + numeric_data$Monetary.LossUSD + numeric_data$Event_Severity + numeric_data$Houses.Ruined + numeric_data$Affected
model <- lm(formula, data = numeric_data)
vif_result <- car::vif(model)
cat("\n","VIF results for Deaths", ":\n")
print(vif_result)
cat("\n")
#check for correlation matrix
cor_matrix <- cor(numeric_data)
print("Correlation matrix ")
print(cor_matrix)
# splitting dataset
set.seed(123)
split_indices <- createDataPartition(combined_data$Year, p = 0.7, list = FALSE)
training_data_combined <- numeric_data[split_indices, ]
testing_data_combined <- numeric_data[-split_indices, ]
train_data <- training_data_combined
test_data <-  testing_data_combined
X_train <- as.matrix(subset(train_data, select =- c(Deaths)))
y_train <- train_data$Deaths
X_test <- as.matrix(subset(test_data, select = - c(Deaths)))
y_test <- test_data$Deaths
X_train_std <- scale(X_train)
X_test_std <- scale(X_test)
enet_model_combined<- cv.glmnet(X_train_std, y_train, alpha = 0.5)
best_lambda <- enet_model_combined$lambda.min
y_pred <- predict(enet_model_combined, newx = X_test_std, s = best_lambda)
mse <- mean((y_pred - y_test)^2)
rsquared <- cor(y_pred, y_test)^2
cat("Best Lambda:", best_lambda, "\n")
cat("Mean Squared Error:", mse, "\n")
cat("R-squared:", rsquared, "\n")
plot(enet_model_combined)
plot(y_test, y_pred, main = "Actual vs Predicted", xlab = "Actual", ylab = "Predicted")
abline(0, 1, col = "red")
rf_model_complex <- randomForest(
X_train, y_train,
ntree = 1000,
mtry = sqrt(ncol(X_train)),
max_depth = NULL
)
y_pred_rf_complex <- predict(rf_model_complex, X_test, type = "response")
mse_rf_complex <- mean((y_pred_rf_complex - y_test)^2)
rsquared_rf_complex <- cor(y_pred_rf_complex, y_test)^2
cat("Random Forest- Mean Squared Error:", mse_rf_complex, "\n")
cat("Random Forest - R-squared:", rsquared_rf_complex, "\n")
classify_disaster <- function(severity, impact, cluster) {
risk_level <- character(length = length(severity))
for (i in 1:length(severity)) {
if (severity[i] == "High Severity") {
if (impact[i] == "Severe Impact") {
risk_level[i] <- "Moderate-High Risk"
} else if (impact[i] == "Moderate Impact") {
risk_level[i] <- "Moderate Risk"
} else {
risk_level[i] <- "Low Risk"
}
} else if (severity[i] == "Low Severity") {
if (impact[i] == "Severe Impact") {
risk_level[i] <- "Moderate-Low Risk"
} else if (impact[i] == "Moderate Impact") {
risk_level[i] <- "Low-Moderate Risk"
} else {
risk_level[i] <- "Very Low Risk"
}
} else {
risk_level[i] <- "Undefined Risk"
}
}
return(risk_level)
}
combined_data$Disaster_Class <- classify_disaster(
combined_data$Severity_Class,
combined_data$Impact_Class,
combined_data$cluster_label
)
heatmap_disaster_classes <- ggplot(combined_data, aes(x = Continent, y = Temporal_Class, fill = Disaster_Class)) +
geom_tile() +
labs(title = "Disaster Classes Across Continents by Temporal Class",
x = "Continent",
y = "Temporal Class") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(heatmap_disaster_classes)
data_for_clustering <- combined_data[, c("Year", "Deaths", "Monetary.LossUSD", "Affected")]
scaled_data <- scale(data_for_clustering)
set.seed(123)
clara_output <- clara(scaled_data, k = 5, samples = 500)
colors <- rainbow(length(unique(clara_output$clustering)))
scaled_data_with_clusters <- cbind(scaled_data, Cluster = clara_output$clustering)
pairs(scaled_data_with_clusters[, -ncol(scaled_data_with_clusters)],
col = colors[clara_output$clustering], pch = 19)
legend("topright", legend = unique(clara_output$clustering), fill = colors, title = "Clusters")
